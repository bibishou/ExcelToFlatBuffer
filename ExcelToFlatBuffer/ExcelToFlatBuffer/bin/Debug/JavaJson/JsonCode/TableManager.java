// Generated by the table tool compiler.  DO NOT EDIT!

package com.cyou.fusion.table.data;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import gnu.trove.iterator.TIntObjectIterator;
import gnu.trove.map.hash.TIntObjectHashMap;
import com.cyou.fusion.table.core.TableUtility;

import java.util.ArrayList;

public class TableManager {

    private static final Logger logger = LoggerFactory.getLogger(TableManager.class);
    private static ArrayList<TableActor> gActorArray = null;
    private static TIntObjectHashMap<TableActor> gActorMap = new TIntObjectHashMap<TableActor>();

    private static boolean initTableActor() {
        try {
            gActorMap.clear();
            gActorArray = TableUtility.LoadJsonTable("Actor.json", TableActor.class);
            for (TableActor table : gActorArray) {
                gActorMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableActor getActorByID(int nKey){
        return gActorMap.get(nKey);
    }

    public static final TableActor getActorByIndex(int nIdx){
        return gActorArray.get(nIdx);
    }

    public static final int getActorSize(){
        return gActorArray.size();
    }

    public static final TIntObjectIterator<TableActor> getActorByIterator() {
        return gActorMap.iterator();
    }
    private static ArrayList<TableActor> gActorArray = null;
    private static TIntObjectHashMap<TableActor> gActorMap = new TIntObjectHashMap<TableActor>();

    private static boolean initTableActor() {
        try {
            gActorMap.clear();
            gActorArray = TableUtility.LoadJsonTable("Actor.json", TableActor.class);
            for (TableActor table : gActorArray) {
                gActorMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableActor getActorByID(int nKey){
        return gActorMap.get(nKey);
    }

    public static final TableActor getActorByIndex(int nIdx){
        return gActorArray.get(nIdx);
    }

    public static final int getActorSize(){
        return gActorArray.size();
    }

    public static final TIntObjectIterator<TableActor> getActorByIterator() {
        return gActorMap.iterator();
    }
    private static ArrayList<TableBuilding> gBuildingArray = null;
    private static TIntObjectHashMap<TableBuilding> gBuildingMap = new TIntObjectHashMap<TableBuilding>();

    private static boolean initTableBuilding() {
        try {
            gBuildingMap.clear();
            gBuildingArray = TableUtility.LoadJsonTable("Building.json", TableBuilding.class);
            for (TableBuilding table : gBuildingArray) {
                gBuildingMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableBuilding getBuildingByID(int nKey){
        return gBuildingMap.get(nKey);
    }

    public static final TableBuilding getBuildingByIndex(int nIdx){
        return gBuildingArray.get(nIdx);
    }

    public static final int getBuildingSize(){
        return gBuildingArray.size();
    }

    public static final TIntObjectIterator<TableBuilding> getBuildingByIterator() {
        return gBuildingMap.iterator();
    }
    private static ArrayList<TableBuilding> gBuildingArray = null;
    private static TIntObjectHashMap<TableBuilding> gBuildingMap = new TIntObjectHashMap<TableBuilding>();

    private static boolean initTableBuilding() {
        try {
            gBuildingMap.clear();
            gBuildingArray = TableUtility.LoadJsonTable("Building.json", TableBuilding.class);
            for (TableBuilding table : gBuildingArray) {
                gBuildingMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableBuilding getBuildingByID(int nKey){
        return gBuildingMap.get(nKey);
    }

    public static final TableBuilding getBuildingByIndex(int nIdx){
        return gBuildingArray.get(nIdx);
    }

    public static final int getBuildingSize(){
        return gBuildingArray.size();
    }

    public static final TIntObjectIterator<TableBuilding> getBuildingByIterator() {
        return gBuildingMap.iterator();
    }
    private static ArrayList<TableBuildingLevel> gBuildingLevelArray = null;
    private static TIntObjectHashMap<TableBuildingLevel> gBuildingLevelMap = new TIntObjectHashMap<TableBuildingLevel>();

    private static boolean initTableBuildingLevel() {
        try {
            gBuildingLevelMap.clear();
            gBuildingLevelArray = TableUtility.LoadJsonTable("BuildingLevel.json", TableBuildingLevel.class);
            for (TableBuildingLevel table : gBuildingLevelArray) {
                gBuildingLevelMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableBuildingLevel getBuildingLevelByID(int nKey){
        return gBuildingLevelMap.get(nKey);
    }

    public static final TableBuildingLevel getBuildingLevelByIndex(int nIdx){
        return gBuildingLevelArray.get(nIdx);
    }

    public static final int getBuildingLevelSize(){
        return gBuildingLevelArray.size();
    }

    public static final TIntObjectIterator<TableBuildingLevel> getBuildingLevelByIterator() {
        return gBuildingLevelMap.iterator();
    }
    private static ArrayList<TableBuildingLevel> gBuildingLevelArray = null;
    private static TIntObjectHashMap<TableBuildingLevel> gBuildingLevelMap = new TIntObjectHashMap<TableBuildingLevel>();

    private static boolean initTableBuildingLevel() {
        try {
            gBuildingLevelMap.clear();
            gBuildingLevelArray = TableUtility.LoadJsonTable("BuildingLevel.json", TableBuildingLevel.class);
            for (TableBuildingLevel table : gBuildingLevelArray) {
                gBuildingLevelMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableBuildingLevel getBuildingLevelByID(int nKey){
        return gBuildingLevelMap.get(nKey);
    }

    public static final TableBuildingLevel getBuildingLevelByIndex(int nIdx){
        return gBuildingLevelArray.get(nIdx);
    }

    public static final int getBuildingLevelSize(){
        return gBuildingLevelArray.size();
    }

    public static final TIntObjectIterator<TableBuildingLevel> getBuildingLevelByIterator() {
        return gBuildingLevelMap.iterator();
    }
    private static ArrayList<TableChapter> gChapterArray = null;
    private static TIntObjectHashMap<TableChapter> gChapterMap = new TIntObjectHashMap<TableChapter>();

    private static boolean initTableChapter() {
        try {
            gChapterMap.clear();
            gChapterArray = TableUtility.LoadJsonTable("Chapter.json", TableChapter.class);
            for (TableChapter table : gChapterArray) {
                gChapterMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableChapter getChapterByID(int nKey){
        return gChapterMap.get(nKey);
    }

    public static final TableChapter getChapterByIndex(int nIdx){
        return gChapterArray.get(nIdx);
    }

    public static final int getChapterSize(){
        return gChapterArray.size();
    }

    public static final TIntObjectIterator<TableChapter> getChapterByIterator() {
        return gChapterMap.iterator();
    }
    private static ArrayList<TableChapter> gChapterArray = null;
    private static TIntObjectHashMap<TableChapter> gChapterMap = new TIntObjectHashMap<TableChapter>();

    private static boolean initTableChapter() {
        try {
            gChapterMap.clear();
            gChapterArray = TableUtility.LoadJsonTable("Chapter.json", TableChapter.class);
            for (TableChapter table : gChapterArray) {
                gChapterMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableChapter getChapterByID(int nKey){
        return gChapterMap.get(nKey);
    }

    public static final TableChapter getChapterByIndex(int nIdx){
        return gChapterArray.get(nIdx);
    }

    public static final int getChapterSize(){
        return gChapterArray.size();
    }

    public static final TIntObjectIterator<TableChapter> getChapterByIterator() {
        return gChapterMap.iterator();
    }
    private static ArrayList<TableCharactor> gCharactorArray = null;
    private static TIntObjectHashMap<TableCharactor> gCharactorMap = new TIntObjectHashMap<TableCharactor>();

    private static boolean initTableCharactor() {
        try {
            gCharactorMap.clear();
            gCharactorArray = TableUtility.LoadJsonTable("Charactor.json", TableCharactor.class);
            for (TableCharactor table : gCharactorArray) {
                gCharactorMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableCharactor getCharactorByID(int nKey){
        return gCharactorMap.get(nKey);
    }

    public static final TableCharactor getCharactorByIndex(int nIdx){
        return gCharactorArray.get(nIdx);
    }

    public static final int getCharactorSize(){
        return gCharactorArray.size();
    }

    public static final TIntObjectIterator<TableCharactor> getCharactorByIterator() {
        return gCharactorMap.iterator();
    }
    private static ArrayList<TableCharactor> gCharactorArray = null;
    private static TIntObjectHashMap<TableCharactor> gCharactorMap = new TIntObjectHashMap<TableCharactor>();

    private static boolean initTableCharactor() {
        try {
            gCharactorMap.clear();
            gCharactorArray = TableUtility.LoadJsonTable("Charactor.json", TableCharactor.class);
            for (TableCharactor table : gCharactorArray) {
                gCharactorMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableCharactor getCharactorByID(int nKey){
        return gCharactorMap.get(nKey);
    }

    public static final TableCharactor getCharactorByIndex(int nIdx){
        return gCharactorArray.get(nIdx);
    }

    public static final int getCharactorSize(){
        return gCharactorArray.size();
    }

    public static final TIntObjectIterator<TableCharactor> getCharactorByIterator() {
        return gCharactorMap.iterator();
    }
    private static ArrayList<TableCommonItem> gCommonItemArray = null;
    private static TIntObjectHashMap<TableCommonItem> gCommonItemMap = new TIntObjectHashMap<TableCommonItem>();

    private static boolean initTableCommonItem() {
        try {
            gCommonItemMap.clear();
            gCommonItemArray = TableUtility.LoadJsonTable("CommonItem.json", TableCommonItem.class);
            for (TableCommonItem table : gCommonItemArray) {
                gCommonItemMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableCommonItem getCommonItemByID(int nKey){
        return gCommonItemMap.get(nKey);
    }

    public static final TableCommonItem getCommonItemByIndex(int nIdx){
        return gCommonItemArray.get(nIdx);
    }

    public static final int getCommonItemSize(){
        return gCommonItemArray.size();
    }

    public static final TIntObjectIterator<TableCommonItem> getCommonItemByIterator() {
        return gCommonItemMap.iterator();
    }
    private static ArrayList<TableCommonItem> gCommonItemArray = null;
    private static TIntObjectHashMap<TableCommonItem> gCommonItemMap = new TIntObjectHashMap<TableCommonItem>();

    private static boolean initTableCommonItem() {
        try {
            gCommonItemMap.clear();
            gCommonItemArray = TableUtility.LoadJsonTable("CommonItem.json", TableCommonItem.class);
            for (TableCommonItem table : gCommonItemArray) {
                gCommonItemMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableCommonItem getCommonItemByID(int nKey){
        return gCommonItemMap.get(nKey);
    }

    public static final TableCommonItem getCommonItemByIndex(int nIdx){
        return gCommonItemArray.get(nIdx);
    }

    public static final int getCommonItemSize(){
        return gCommonItemArray.size();
    }

    public static final TIntObjectIterator<TableCommonItem> getCommonItemByIterator() {
        return gCommonItemMap.iterator();
    }
    private static ArrayList<TableConstConfig> gConstConfigArray = null;
    private static TIntObjectHashMap<TableConstConfig> gConstConfigMap = new TIntObjectHashMap<TableConstConfig>();

    private static boolean initTableConstConfig() {
        try {
            gConstConfigMap.clear();
            gConstConfigArray = TableUtility.LoadJsonTable("ConstConfig.json", TableConstConfig.class);
            for (TableConstConfig table : gConstConfigArray) {
                gConstConfigMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableConstConfig getConstConfigByID(int nKey){
        return gConstConfigMap.get(nKey);
    }

    public static final TableConstConfig getConstConfigByIndex(int nIdx){
        return gConstConfigArray.get(nIdx);
    }

    public static final int getConstConfigSize(){
        return gConstConfigArray.size();
    }

    public static final TIntObjectIterator<TableConstConfig> getConstConfigByIterator() {
        return gConstConfigMap.iterator();
    }
    private static ArrayList<TableConstConfig> gConstConfigArray = null;
    private static TIntObjectHashMap<TableConstConfig> gConstConfigMap = new TIntObjectHashMap<TableConstConfig>();

    private static boolean initTableConstConfig() {
        try {
            gConstConfigMap.clear();
            gConstConfigArray = TableUtility.LoadJsonTable("ConstConfig.json", TableConstConfig.class);
            for (TableConstConfig table : gConstConfigArray) {
                gConstConfigMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableConstConfig getConstConfigByID(int nKey){
        return gConstConfigMap.get(nKey);
    }

    public static final TableConstConfig getConstConfigByIndex(int nIdx){
        return gConstConfigArray.get(nIdx);
    }

    public static final int getConstConfigSize(){
        return gConstConfigArray.size();
    }

    public static final TIntObjectIterator<TableConstConfig> getConstConfigByIterator() {
        return gConstConfigMap.iterator();
    }
    private static ArrayList<TableEagleChickActor> gEagleChickActorArray = null;
    private static TIntObjectHashMap<TableEagleChickActor> gEagleChickActorMap = new TIntObjectHashMap<TableEagleChickActor>();

    private static boolean initTableEagleChickActor() {
        try {
            gEagleChickActorMap.clear();
            gEagleChickActorArray = TableUtility.LoadJsonTable("EagleChickActor.json", TableEagleChickActor.class);
            for (TableEagleChickActor table : gEagleChickActorArray) {
                gEagleChickActorMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableEagleChickActor getEagleChickActorByID(int nKey){
        return gEagleChickActorMap.get(nKey);
    }

    public static final TableEagleChickActor getEagleChickActorByIndex(int nIdx){
        return gEagleChickActorArray.get(nIdx);
    }

    public static final int getEagleChickActorSize(){
        return gEagleChickActorArray.size();
    }

    public static final TIntObjectIterator<TableEagleChickActor> getEagleChickActorByIterator() {
        return gEagleChickActorMap.iterator();
    }
    private static ArrayList<TableEagleChickActor> gEagleChickActorArray = null;
    private static TIntObjectHashMap<TableEagleChickActor> gEagleChickActorMap = new TIntObjectHashMap<TableEagleChickActor>();

    private static boolean initTableEagleChickActor() {
        try {
            gEagleChickActorMap.clear();
            gEagleChickActorArray = TableUtility.LoadJsonTable("EagleChickActor.json", TableEagleChickActor.class);
            for (TableEagleChickActor table : gEagleChickActorArray) {
                gEagleChickActorMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableEagleChickActor getEagleChickActorByID(int nKey){
        return gEagleChickActorMap.get(nKey);
    }

    public static final TableEagleChickActor getEagleChickActorByIndex(int nIdx){
        return gEagleChickActorArray.get(nIdx);
    }

    public static final int getEagleChickActorSize(){
        return gEagleChickActorArray.size();
    }

    public static final TIntObjectIterator<TableEagleChickActor> getEagleChickActorByIterator() {
        return gEagleChickActorMap.iterator();
    }
    private static ArrayList<TableEagleChickMap> gEagleChickMapArray = null;
    private static TIntObjectHashMap<TableEagleChickMap> gEagleChickMapMap = new TIntObjectHashMap<TableEagleChickMap>();

    private static boolean initTableEagleChickMap() {
        try {
            gEagleChickMapMap.clear();
            gEagleChickMapArray = TableUtility.LoadJsonTable("EagleChickMap.json", TableEagleChickMap.class);
            for (TableEagleChickMap table : gEagleChickMapArray) {
                gEagleChickMapMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableEagleChickMap getEagleChickMapByID(int nKey){
        return gEagleChickMapMap.get(nKey);
    }

    public static final TableEagleChickMap getEagleChickMapByIndex(int nIdx){
        return gEagleChickMapArray.get(nIdx);
    }

    public static final int getEagleChickMapSize(){
        return gEagleChickMapArray.size();
    }

    public static final TIntObjectIterator<TableEagleChickMap> getEagleChickMapByIterator() {
        return gEagleChickMapMap.iterator();
    }
    private static ArrayList<TableEagleChickMap> gEagleChickMapArray = null;
    private static TIntObjectHashMap<TableEagleChickMap> gEagleChickMapMap = new TIntObjectHashMap<TableEagleChickMap>();

    private static boolean initTableEagleChickMap() {
        try {
            gEagleChickMapMap.clear();
            gEagleChickMapArray = TableUtility.LoadJsonTable("EagleChickMap.json", TableEagleChickMap.class);
            for (TableEagleChickMap table : gEagleChickMapArray) {
                gEagleChickMapMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableEagleChickMap getEagleChickMapByID(int nKey){
        return gEagleChickMapMap.get(nKey);
    }

    public static final TableEagleChickMap getEagleChickMapByIndex(int nIdx){
        return gEagleChickMapArray.get(nIdx);
    }

    public static final int getEagleChickMapSize(){
        return gEagleChickMapArray.size();
    }

    public static final TIntObjectIterator<TableEagleChickMap> getEagleChickMapByIterator() {
        return gEagleChickMapMap.iterator();
    }
    private static ArrayList<TableEagleChickMapConfig> gEagleChickMapConfigArray = null;
    private static TIntObjectHashMap<TableEagleChickMapConfig> gEagleChickMapConfigMap = new TIntObjectHashMap<TableEagleChickMapConfig>();

    private static boolean initTableEagleChickMapConfig() {
        try {
            gEagleChickMapConfigMap.clear();
            gEagleChickMapConfigArray = TableUtility.LoadJsonTable("EagleChickMapConfig.json", TableEagleChickMapConfig.class);
            for (TableEagleChickMapConfig table : gEagleChickMapConfigArray) {
                gEagleChickMapConfigMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableEagleChickMapConfig getEagleChickMapConfigByID(int nKey){
        return gEagleChickMapConfigMap.get(nKey);
    }

    public static final TableEagleChickMapConfig getEagleChickMapConfigByIndex(int nIdx){
        return gEagleChickMapConfigArray.get(nIdx);
    }

    public static final int getEagleChickMapConfigSize(){
        return gEagleChickMapConfigArray.size();
    }

    public static final TIntObjectIterator<TableEagleChickMapConfig> getEagleChickMapConfigByIterator() {
        return gEagleChickMapConfigMap.iterator();
    }
    private static ArrayList<TableEagleChickMapConfig> gEagleChickMapConfigArray = null;
    private static TIntObjectHashMap<TableEagleChickMapConfig> gEagleChickMapConfigMap = new TIntObjectHashMap<TableEagleChickMapConfig>();

    private static boolean initTableEagleChickMapConfig() {
        try {
            gEagleChickMapConfigMap.clear();
            gEagleChickMapConfigArray = TableUtility.LoadJsonTable("EagleChickMapConfig.json", TableEagleChickMapConfig.class);
            for (TableEagleChickMapConfig table : gEagleChickMapConfigArray) {
                gEagleChickMapConfigMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableEagleChickMapConfig getEagleChickMapConfigByID(int nKey){
        return gEagleChickMapConfigMap.get(nKey);
    }

    public static final TableEagleChickMapConfig getEagleChickMapConfigByIndex(int nIdx){
        return gEagleChickMapConfigArray.get(nIdx);
    }

    public static final int getEagleChickMapConfigSize(){
        return gEagleChickMapConfigArray.size();
    }

    public static final TIntObjectIterator<TableEagleChickMapConfig> getEagleChickMapConfigByIterator() {
        return gEagleChickMapConfigMap.iterator();
    }
    private static ArrayList<TableGameLevels> gGameLevelsArray = null;
    private static TIntObjectHashMap<TableGameLevels> gGameLevelsMap = new TIntObjectHashMap<TableGameLevels>();

    private static boolean initTableGameLevels() {
        try {
            gGameLevelsMap.clear();
            gGameLevelsArray = TableUtility.LoadJsonTable("GameLevels.json", TableGameLevels.class);
            for (TableGameLevels table : gGameLevelsArray) {
                gGameLevelsMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableGameLevels getGameLevelsByID(int nKey){
        return gGameLevelsMap.get(nKey);
    }

    public static final TableGameLevels getGameLevelsByIndex(int nIdx){
        return gGameLevelsArray.get(nIdx);
    }

    public static final int getGameLevelsSize(){
        return gGameLevelsArray.size();
    }

    public static final TIntObjectIterator<TableGameLevels> getGameLevelsByIterator() {
        return gGameLevelsMap.iterator();
    }
    private static ArrayList<TableGameLevels> gGameLevelsArray = null;
    private static TIntObjectHashMap<TableGameLevels> gGameLevelsMap = new TIntObjectHashMap<TableGameLevels>();

    private static boolean initTableGameLevels() {
        try {
            gGameLevelsMap.clear();
            gGameLevelsArray = TableUtility.LoadJsonTable("GameLevels.json", TableGameLevels.class);
            for (TableGameLevels table : gGameLevelsArray) {
                gGameLevelsMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableGameLevels getGameLevelsByID(int nKey){
        return gGameLevelsMap.get(nKey);
    }

    public static final TableGameLevels getGameLevelsByIndex(int nIdx){
        return gGameLevelsArray.get(nIdx);
    }

    public static final int getGameLevelsSize(){
        return gGameLevelsArray.size();
    }

    public static final TIntObjectIterator<TableGameLevels> getGameLevelsByIterator() {
        return gGameLevelsMap.iterator();
    }
    private static ArrayList<TableLevelAward> gLevelAwardArray = null;
    private static TIntObjectHashMap<TableLevelAward> gLevelAwardMap = new TIntObjectHashMap<TableLevelAward>();

    private static boolean initTableLevelAward() {
        try {
            gLevelAwardMap.clear();
            gLevelAwardArray = TableUtility.LoadJsonTable("LevelAward.json", TableLevelAward.class);
            for (TableLevelAward table : gLevelAwardArray) {
                gLevelAwardMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableLevelAward getLevelAwardByID(int nKey){
        return gLevelAwardMap.get(nKey);
    }

    public static final TableLevelAward getLevelAwardByIndex(int nIdx){
        return gLevelAwardArray.get(nIdx);
    }

    public static final int getLevelAwardSize(){
        return gLevelAwardArray.size();
    }

    public static final TIntObjectIterator<TableLevelAward> getLevelAwardByIterator() {
        return gLevelAwardMap.iterator();
    }
    private static ArrayList<TableLevelAward> gLevelAwardArray = null;
    private static TIntObjectHashMap<TableLevelAward> gLevelAwardMap = new TIntObjectHashMap<TableLevelAward>();

    private static boolean initTableLevelAward() {
        try {
            gLevelAwardMap.clear();
            gLevelAwardArray = TableUtility.LoadJsonTable("LevelAward.json", TableLevelAward.class);
            for (TableLevelAward table : gLevelAwardArray) {
                gLevelAwardMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableLevelAward getLevelAwardByID(int nKey){
        return gLevelAwardMap.get(nKey);
    }

    public static final TableLevelAward getLevelAwardByIndex(int nIdx){
        return gLevelAwardArray.get(nIdx);
    }

    public static final int getLevelAwardSize(){
        return gLevelAwardArray.size();
    }

    public static final TIntObjectIterator<TableLevelAward> getLevelAwardByIterator() {
        return gLevelAwardMap.iterator();
    }
    private static ArrayList<TableLevelTarget> gLevelTargetArray = null;
    private static TIntObjectHashMap<TableLevelTarget> gLevelTargetMap = new TIntObjectHashMap<TableLevelTarget>();

    private static boolean initTableLevelTarget() {
        try {
            gLevelTargetMap.clear();
            gLevelTargetArray = TableUtility.LoadJsonTable("LevelTarget.json", TableLevelTarget.class);
            for (TableLevelTarget table : gLevelTargetArray) {
                gLevelTargetMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableLevelTarget getLevelTargetByID(int nKey){
        return gLevelTargetMap.get(nKey);
    }

    public static final TableLevelTarget getLevelTargetByIndex(int nIdx){
        return gLevelTargetArray.get(nIdx);
    }

    public static final int getLevelTargetSize(){
        return gLevelTargetArray.size();
    }

    public static final TIntObjectIterator<TableLevelTarget> getLevelTargetByIterator() {
        return gLevelTargetMap.iterator();
    }
    private static ArrayList<TableLevelTarget> gLevelTargetArray = null;
    private static TIntObjectHashMap<TableLevelTarget> gLevelTargetMap = new TIntObjectHashMap<TableLevelTarget>();

    private static boolean initTableLevelTarget() {
        try {
            gLevelTargetMap.clear();
            gLevelTargetArray = TableUtility.LoadJsonTable("LevelTarget.json", TableLevelTarget.class);
            for (TableLevelTarget table : gLevelTargetArray) {
                gLevelTargetMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableLevelTarget getLevelTargetByID(int nKey){
        return gLevelTargetMap.get(nKey);
    }

    public static final TableLevelTarget getLevelTargetByIndex(int nIdx){
        return gLevelTargetArray.get(nIdx);
    }

    public static final int getLevelTargetSize(){
        return gLevelTargetArray.size();
    }

    public static final TIntObjectIterator<TableLevelTarget> getLevelTargetByIterator() {
        return gLevelTargetMap.iterator();
    }
    private static ArrayList<TableMissionList> gMissionListArray = null;
    private static TIntObjectHashMap<TableMissionList> gMissionListMap = new TIntObjectHashMap<TableMissionList>();

    private static boolean initTableMissionList() {
        try {
            gMissionListMap.clear();
            gMissionListArray = TableUtility.LoadJsonTable("MissionList.json", TableMissionList.class);
            for (TableMissionList table : gMissionListArray) {
                gMissionListMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableMissionList getMissionListByID(int nKey){
        return gMissionListMap.get(nKey);
    }

    public static final TableMissionList getMissionListByIndex(int nIdx){
        return gMissionListArray.get(nIdx);
    }

    public static final int getMissionListSize(){
        return gMissionListArray.size();
    }

    public static final TIntObjectIterator<TableMissionList> getMissionListByIterator() {
        return gMissionListMap.iterator();
    }
    private static ArrayList<TableMissionList> gMissionListArray = null;
    private static TIntObjectHashMap<TableMissionList> gMissionListMap = new TIntObjectHashMap<TableMissionList>();

    private static boolean initTableMissionList() {
        try {
            gMissionListMap.clear();
            gMissionListArray = TableUtility.LoadJsonTable("MissionList.json", TableMissionList.class);
            for (TableMissionList table : gMissionListArray) {
                gMissionListMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableMissionList getMissionListByID(int nKey){
        return gMissionListMap.get(nKey);
    }

    public static final TableMissionList getMissionListByIndex(int nIdx){
        return gMissionListArray.get(nIdx);
    }

    public static final int getMissionListSize(){
        return gMissionListArray.size();
    }

    public static final TIntObjectIterator<TableMissionList> getMissionListByIterator() {
        return gMissionListMap.iterator();
    }
    private static ArrayList<TableMoFangProduceItem> gMoFangProduceItemArray = null;
    private static TIntObjectHashMap<TableMoFangProduceItem> gMoFangProduceItemMap = new TIntObjectHashMap<TableMoFangProduceItem>();

    private static boolean initTableMoFangProduceItem() {
        try {
            gMoFangProduceItemMap.clear();
            gMoFangProduceItemArray = TableUtility.LoadJsonTable("MoFangProduceItem.json", TableMoFangProduceItem.class);
            for (TableMoFangProduceItem table : gMoFangProduceItemArray) {
                gMoFangProduceItemMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableMoFangProduceItem getMoFangProduceItemByID(int nKey){
        return gMoFangProduceItemMap.get(nKey);
    }

    public static final TableMoFangProduceItem getMoFangProduceItemByIndex(int nIdx){
        return gMoFangProduceItemArray.get(nIdx);
    }

    public static final int getMoFangProduceItemSize(){
        return gMoFangProduceItemArray.size();
    }

    public static final TIntObjectIterator<TableMoFangProduceItem> getMoFangProduceItemByIterator() {
        return gMoFangProduceItemMap.iterator();
    }
    private static ArrayList<TableMoFangProduceItem> gMoFangProduceItemArray = null;
    private static TIntObjectHashMap<TableMoFangProduceItem> gMoFangProduceItemMap = new TIntObjectHashMap<TableMoFangProduceItem>();

    private static boolean initTableMoFangProduceItem() {
        try {
            gMoFangProduceItemMap.clear();
            gMoFangProduceItemArray = TableUtility.LoadJsonTable("MoFangProduceItem.json", TableMoFangProduceItem.class);
            for (TableMoFangProduceItem table : gMoFangProduceItemArray) {
                gMoFangProduceItemMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableMoFangProduceItem getMoFangProduceItemByID(int nKey){
        return gMoFangProduceItemMap.get(nKey);
    }

    public static final TableMoFangProduceItem getMoFangProduceItemByIndex(int nIdx){
        return gMoFangProduceItemArray.get(nIdx);
    }

    public static final int getMoFangProduceItemSize(){
        return gMoFangProduceItemArray.size();
    }

    public static final TIntObjectIterator<TableMoFangProduceItem> getMoFangProduceItemByIterator() {
        return gMoFangProduceItemMap.iterator();
    }
    private static ArrayList<TableMultipleDispleScoreRatio> gMultipleDispleScoreRatioArray = null;
    private static TIntObjectHashMap<TableMultipleDispleScoreRatio> gMultipleDispleScoreRatioMap = new TIntObjectHashMap<TableMultipleDispleScoreRatio>();

    private static boolean initTableMultipleDispleScoreRatio() {
        try {
            gMultipleDispleScoreRatioMap.clear();
            gMultipleDispleScoreRatioArray = TableUtility.LoadJsonTable("MultipleDispleScoreRatio.json", TableMultipleDispleScoreRatio.class);
            for (TableMultipleDispleScoreRatio table : gMultipleDispleScoreRatioArray) {
                gMultipleDispleScoreRatioMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableMultipleDispleScoreRatio getMultipleDispleScoreRatioByID(int nKey){
        return gMultipleDispleScoreRatioMap.get(nKey);
    }

    public static final TableMultipleDispleScoreRatio getMultipleDispleScoreRatioByIndex(int nIdx){
        return gMultipleDispleScoreRatioArray.get(nIdx);
    }

    public static final int getMultipleDispleScoreRatioSize(){
        return gMultipleDispleScoreRatioArray.size();
    }

    public static final TIntObjectIterator<TableMultipleDispleScoreRatio> getMultipleDispleScoreRatioByIterator() {
        return gMultipleDispleScoreRatioMap.iterator();
    }
    private static ArrayList<TableMultipleDispleScoreRatio> gMultipleDispleScoreRatioArray = null;
    private static TIntObjectHashMap<TableMultipleDispleScoreRatio> gMultipleDispleScoreRatioMap = new TIntObjectHashMap<TableMultipleDispleScoreRatio>();

    private static boolean initTableMultipleDispleScoreRatio() {
        try {
            gMultipleDispleScoreRatioMap.clear();
            gMultipleDispleScoreRatioArray = TableUtility.LoadJsonTable("MultipleDispleScoreRatio.json", TableMultipleDispleScoreRatio.class);
            for (TableMultipleDispleScoreRatio table : gMultipleDispleScoreRatioArray) {
                gMultipleDispleScoreRatioMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableMultipleDispleScoreRatio getMultipleDispleScoreRatioByID(int nKey){
        return gMultipleDispleScoreRatioMap.get(nKey);
    }

    public static final TableMultipleDispleScoreRatio getMultipleDispleScoreRatioByIndex(int nIdx){
        return gMultipleDispleScoreRatioArray.get(nIdx);
    }

    public static final int getMultipleDispleScoreRatioSize(){
        return gMultipleDispleScoreRatioArray.size();
    }

    public static final TIntObjectIterator<TableMultipleDispleScoreRatio> getMultipleDispleScoreRatioByIterator() {
        return gMultipleDispleScoreRatioMap.iterator();
    }
    private static ArrayList<TableParkLevel> gParkLevelArray = null;
    private static TIntObjectHashMap<TableParkLevel> gParkLevelMap = new TIntObjectHashMap<TableParkLevel>();

    private static boolean initTableParkLevel() {
        try {
            gParkLevelMap.clear();
            gParkLevelArray = TableUtility.LoadJsonTable("ParkLevel.json", TableParkLevel.class);
            for (TableParkLevel table : gParkLevelArray) {
                gParkLevelMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableParkLevel getParkLevelByID(int nKey){
        return gParkLevelMap.get(nKey);
    }

    public static final TableParkLevel getParkLevelByIndex(int nIdx){
        return gParkLevelArray.get(nIdx);
    }

    public static final int getParkLevelSize(){
        return gParkLevelArray.size();
    }

    public static final TIntObjectIterator<TableParkLevel> getParkLevelByIterator() {
        return gParkLevelMap.iterator();
    }
    private static ArrayList<TableParkLevel> gParkLevelArray = null;
    private static TIntObjectHashMap<TableParkLevel> gParkLevelMap = new TIntObjectHashMap<TableParkLevel>();

    private static boolean initTableParkLevel() {
        try {
            gParkLevelMap.clear();
            gParkLevelArray = TableUtility.LoadJsonTable("ParkLevel.json", TableParkLevel.class);
            for (TableParkLevel table : gParkLevelArray) {
                gParkLevelMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableParkLevel getParkLevelByID(int nKey){
        return gParkLevelMap.get(nKey);
    }

    public static final TableParkLevel getParkLevelByIndex(int nIdx){
        return gParkLevelArray.get(nIdx);
    }

    public static final int getParkLevelSize(){
        return gParkLevelArray.size();
    }

    public static final TIntObjectIterator<TableParkLevel> getParkLevelByIterator() {
        return gParkLevelMap.iterator();
    }
    private static ArrayList<TableReward> gRewardArray = null;
    private static TIntObjectHashMap<TableReward> gRewardMap = new TIntObjectHashMap<TableReward>();

    private static boolean initTableReward() {
        try {
            gRewardMap.clear();
            gRewardArray = TableUtility.LoadJsonTable("Reward.json", TableReward.class);
            for (TableReward table : gRewardArray) {
                gRewardMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableReward getRewardByID(int nKey){
        return gRewardMap.get(nKey);
    }

    public static final TableReward getRewardByIndex(int nIdx){
        return gRewardArray.get(nIdx);
    }

    public static final int getRewardSize(){
        return gRewardArray.size();
    }

    public static final TIntObjectIterator<TableReward> getRewardByIterator() {
        return gRewardMap.iterator();
    }
    private static ArrayList<TableReward> gRewardArray = null;
    private static TIntObjectHashMap<TableReward> gRewardMap = new TIntObjectHashMap<TableReward>();

    private static boolean initTableReward() {
        try {
            gRewardMap.clear();
            gRewardArray = TableUtility.LoadJsonTable("Reward.json", TableReward.class);
            for (TableReward table : gRewardArray) {
                gRewardMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableReward getRewardByID(int nKey){
        return gRewardMap.get(nKey);
    }

    public static final TableReward getRewardByIndex(int nIdx){
        return gRewardArray.get(nIdx);
    }

    public static final int getRewardSize(){
        return gRewardArray.size();
    }

    public static final TIntObjectIterator<TableReward> getRewardByIterator() {
        return gRewardMap.iterator();
    }
    private static ArrayList<TableSceneClass> gSceneClassArray = null;
    private static TIntObjectHashMap<TableSceneClass> gSceneClassMap = new TIntObjectHashMap<TableSceneClass>();

    private static boolean initTableSceneClass() {
        try {
            gSceneClassMap.clear();
            gSceneClassArray = TableUtility.LoadJsonTable("SceneClass.json", TableSceneClass.class);
            for (TableSceneClass table : gSceneClassArray) {
                gSceneClassMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableSceneClass getSceneClassByID(int nKey){
        return gSceneClassMap.get(nKey);
    }

    public static final TableSceneClass getSceneClassByIndex(int nIdx){
        return gSceneClassArray.get(nIdx);
    }

    public static final int getSceneClassSize(){
        return gSceneClassArray.size();
    }

    public static final TIntObjectIterator<TableSceneClass> getSceneClassByIterator() {
        return gSceneClassMap.iterator();
    }
    private static ArrayList<TableSceneClass> gSceneClassArray = null;
    private static TIntObjectHashMap<TableSceneClass> gSceneClassMap = new TIntObjectHashMap<TableSceneClass>();

    private static boolean initTableSceneClass() {
        try {
            gSceneClassMap.clear();
            gSceneClassArray = TableUtility.LoadJsonTable("SceneClass.json", TableSceneClass.class);
            for (TableSceneClass table : gSceneClassArray) {
                gSceneClassMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableSceneClass getSceneClassByID(int nKey){
        return gSceneClassMap.get(nKey);
    }

    public static final TableSceneClass getSceneClassByIndex(int nIdx){
        return gSceneClassArray.get(nIdx);
    }

    public static final int getSceneClassSize(){
        return gSceneClassArray.size();
    }

    public static final TIntObjectIterator<TableSceneClass> getSceneClassByIterator() {
        return gSceneClassMap.iterator();
    }
    private static ArrayList<TableStringDictionary> gStringDictionaryArray = null;
    private static TIntObjectHashMap<TableStringDictionary> gStringDictionaryMap = new TIntObjectHashMap<TableStringDictionary>();

    private static boolean initTableStringDictionary() {
        try {
            gStringDictionaryMap.clear();
            gStringDictionaryArray = TableUtility.LoadJsonTable("StringDictionary.json", TableStringDictionary.class);
            for (TableStringDictionary table : gStringDictionaryArray) {
                gStringDictionaryMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableStringDictionary getStringDictionaryByID(int nKey){
        return gStringDictionaryMap.get(nKey);
    }

    public static final TableStringDictionary getStringDictionaryByIndex(int nIdx){
        return gStringDictionaryArray.get(nIdx);
    }

    public static final int getStringDictionarySize(){
        return gStringDictionaryArray.size();
    }

    public static final TIntObjectIterator<TableStringDictionary> getStringDictionaryByIterator() {
        return gStringDictionaryMap.iterator();
    }
    private static ArrayList<TableStringDictionary> gStringDictionaryArray = null;
    private static TIntObjectHashMap<TableStringDictionary> gStringDictionaryMap = new TIntObjectHashMap<TableStringDictionary>();

    private static boolean initTableStringDictionary() {
        try {
            gStringDictionaryMap.clear();
            gStringDictionaryArray = TableUtility.LoadJsonTable("StringDictionary.json", TableStringDictionary.class);
            for (TableStringDictionary table : gStringDictionaryArray) {
                gStringDictionaryMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableStringDictionary getStringDictionaryByID(int nKey){
        return gStringDictionaryMap.get(nKey);
    }

    public static final TableStringDictionary getStringDictionaryByIndex(int nIdx){
        return gStringDictionaryArray.get(nIdx);
    }

    public static final int getStringDictionarySize(){
        return gStringDictionaryArray.size();
    }

    public static final TIntObjectIterator<TableStringDictionary> getStringDictionaryByIterator() {
        return gStringDictionaryMap.iterator();
    }
    private static ArrayList<TableTerrain> gTerrainArray = null;
    private static TIntObjectHashMap<TableTerrain> gTerrainMap = new TIntObjectHashMap<TableTerrain>();

    private static boolean initTableTerrain() {
        try {
            gTerrainMap.clear();
            gTerrainArray = TableUtility.LoadJsonTable("Terrain.json", TableTerrain.class);
            for (TableTerrain table : gTerrainArray) {
                gTerrainMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableTerrain getTerrainByID(int nKey){
        return gTerrainMap.get(nKey);
    }

    public static final TableTerrain getTerrainByIndex(int nIdx){
        return gTerrainArray.get(nIdx);
    }

    public static final int getTerrainSize(){
        return gTerrainArray.size();
    }

    public static final TIntObjectIterator<TableTerrain> getTerrainByIterator() {
        return gTerrainMap.iterator();
    }
    private static ArrayList<TableTerrain> gTerrainArray = null;
    private static TIntObjectHashMap<TableTerrain> gTerrainMap = new TIntObjectHashMap<TableTerrain>();

    private static boolean initTableTerrain() {
        try {
            gTerrainMap.clear();
            gTerrainArray = TableUtility.LoadJsonTable("Terrain.json", TableTerrain.class);
            for (TableTerrain table : gTerrainArray) {
                gTerrainMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableTerrain getTerrainByID(int nKey){
        return gTerrainMap.get(nKey);
    }

    public static final TableTerrain getTerrainByIndex(int nIdx){
        return gTerrainArray.get(nIdx);
    }

    public static final int getTerrainSize(){
        return gTerrainArray.size();
    }

    public static final TIntObjectIterator<TableTerrain> getTerrainByIterator() {
        return gTerrainMap.iterator();
    }
    private static ArrayList<TableWorker> gWorkerArray = null;
    private static TIntObjectHashMap<TableWorker> gWorkerMap = new TIntObjectHashMap<TableWorker>();

    private static boolean initTableWorker() {
        try {
            gWorkerMap.clear();
            gWorkerArray = TableUtility.LoadJsonTable("Worker.json", TableWorker.class);
            for (TableWorker table : gWorkerArray) {
                gWorkerMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableWorker getWorkerByID(int nKey){
        return gWorkerMap.get(nKey);
    }

    public static final TableWorker getWorkerByIndex(int nIdx){
        return gWorkerArray.get(nIdx);
    }

    public static final int getWorkerSize(){
        return gWorkerArray.size();
    }

    public static final TIntObjectIterator<TableWorker> getWorkerByIterator() {
        return gWorkerMap.iterator();
    }
    private static ArrayList<TableWorker> gWorkerArray = null;
    private static TIntObjectHashMap<TableWorker> gWorkerMap = new TIntObjectHashMap<TableWorker>();

    private static boolean initTableWorker() {
        try {
            gWorkerMap.clear();
            gWorkerArray = TableUtility.LoadJsonTable("Worker.json", TableWorker.class);
            for (TableWorker table : gWorkerArray) {
                gWorkerMap.put(table.getId(), table);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    public static final TableWorker getWorkerByID(int nKey){
        return gWorkerMap.get(nKey);
    }

    public static final TableWorker getWorkerByIndex(int nIdx){
        return gWorkerArray.get(nIdx);
    }

    public static final int getWorkerSize(){
        return gWorkerArray.size();
    }

    public static final TIntObjectIterator<TableWorker> getWorkerByIterator() {
        return gWorkerMap.iterator();
    }


    public static boolean initTable(){
        if (!initTableActor()){
           logger.error("load table Actor error!");
           return false;
        }
        if (!initTableActor()){
           logger.error("load table Actor error!");
           return false;
        }
        if (!initTableBuilding()){
           logger.error("load table Building error!");
           return false;
        }
        if (!initTableBuilding()){
           logger.error("load table Building error!");
           return false;
        }
        if (!initTableBuildingLevel()){
           logger.error("load table BuildingLevel error!");
           return false;
        }
        if (!initTableBuildingLevel()){
           logger.error("load table BuildingLevel error!");
           return false;
        }
        if (!initTableChapter()){
           logger.error("load table Chapter error!");
           return false;
        }
        if (!initTableChapter()){
           logger.error("load table Chapter error!");
           return false;
        }
        if (!initTableCharactor()){
           logger.error("load table Charactor error!");
           return false;
        }
        if (!initTableCharactor()){
           logger.error("load table Charactor error!");
           return false;
        }
        if (!initTableCommonItem()){
           logger.error("load table CommonItem error!");
           return false;
        }
        if (!initTableCommonItem()){
           logger.error("load table CommonItem error!");
           return false;
        }
        if (!initTableConstConfig()){
           logger.error("load table ConstConfig error!");
           return false;
        }
        if (!initTableConstConfig()){
           logger.error("load table ConstConfig error!");
           return false;
        }
        if (!initTableEagleChickActor()){
           logger.error("load table EagleChickActor error!");
           return false;
        }
        if (!initTableEagleChickActor()){
           logger.error("load table EagleChickActor error!");
           return false;
        }
        if (!initTableEagleChickMap()){
           logger.error("load table EagleChickMap error!");
           return false;
        }
        if (!initTableEagleChickMap()){
           logger.error("load table EagleChickMap error!");
           return false;
        }
        if (!initTableEagleChickMapConfig()){
           logger.error("load table EagleChickMapConfig error!");
           return false;
        }
        if (!initTableEagleChickMapConfig()){
           logger.error("load table EagleChickMapConfig error!");
           return false;
        }
        if (!initTableGameLevels()){
           logger.error("load table GameLevels error!");
           return false;
        }
        if (!initTableGameLevels()){
           logger.error("load table GameLevels error!");
           return false;
        }
        if (!initTableLevelAward()){
           logger.error("load table LevelAward error!");
           return false;
        }
        if (!initTableLevelAward()){
           logger.error("load table LevelAward error!");
           return false;
        }
        if (!initTableLevelTarget()){
           logger.error("load table LevelTarget error!");
           return false;
        }
        if (!initTableLevelTarget()){
           logger.error("load table LevelTarget error!");
           return false;
        }
        if (!initTableMissionList()){
           logger.error("load table MissionList error!");
           return false;
        }
        if (!initTableMissionList()){
           logger.error("load table MissionList error!");
           return false;
        }
        if (!initTableMoFangProduceItem()){
           logger.error("load table MoFangProduceItem error!");
           return false;
        }
        if (!initTableMoFangProduceItem()){
           logger.error("load table MoFangProduceItem error!");
           return false;
        }
        if (!initTableMultipleDispleScoreRatio()){
           logger.error("load table MultipleDispleScoreRatio error!");
           return false;
        }
        if (!initTableMultipleDispleScoreRatio()){
           logger.error("load table MultipleDispleScoreRatio error!");
           return false;
        }
        if (!initTableParkLevel()){
           logger.error("load table ParkLevel error!");
           return false;
        }
        if (!initTableParkLevel()){
           logger.error("load table ParkLevel error!");
           return false;
        }
        if (!initTableReward()){
           logger.error("load table Reward error!");
           return false;
        }
        if (!initTableReward()){
           logger.error("load table Reward error!");
           return false;
        }
        if (!initTableSceneClass()){
           logger.error("load table SceneClass error!");
           return false;
        }
        if (!initTableSceneClass()){
           logger.error("load table SceneClass error!");
           return false;
        }
        if (!initTableStringDictionary()){
           logger.error("load table StringDictionary error!");
           return false;
        }
        if (!initTableStringDictionary()){
           logger.error("load table StringDictionary error!");
           return false;
        }
        if (!initTableTerrain()){
           logger.error("load table Terrain error!");
           return false;
        }
        if (!initTableTerrain()){
           logger.error("load table Terrain error!");
           return false;
        }
        if (!initTableWorker()){
           logger.error("load table Worker error!");
           return false;
        }
        if (!initTableWorker()){
           logger.error("load table Worker error!");
           return false;
        }

        return true;
    }
}
