// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameMain
{

using global::System;
using global::FlatBuffers;

public partial struct Table_Effectt{public IFlatbufferObject GetElement(int i) { return Data(i); }}
public partial struct Table_Effectt : IFlatbufferObject , ITable
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Table_Effectt GetRootAsTable_Effectt(ByteBuffer _bb) { return GetRootAsTable_Effectt(_bb, new Table_Effectt()); }
  public static Table_Effectt GetRootAsTable_Effectt(ByteBuffer _bb, Table_Effectt obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Table_Effectt __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public DREffectt? Data(int j) { int o = __p.__offset(4); return o != 0 ? (DREffectt?)(new DREffectt()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Table_Effectt> CreateTable_Effectt(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartObject(1);
    Table_Effectt.AddData(builder, dataOffset);
    return Table_Effectt.EndTable_Effectt(builder);
  }

  public static void StartTable_Effectt(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<DREffectt>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<DREffectt>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Table_Effectt> EndTable_Effectt(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Table_Effectt>(o);
  }
  public static void FinishTable_EffecttBuffer(FlatBufferBuilder builder, Offset<Table_Effectt> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTable_EffecttBuffer(FlatBufferBuilder builder, Offset<Table_Effectt> offset) { builder.FinishSizePrefixed(offset.Value); }
};

public struct DREffectt : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DREffectt GetRootAsDREffectt(ByteBuffer _bb) { return GetRootAsDREffectt(_bb, new DREffectt()); }
  public static DREffectt GetRootAsDREffectt(ByteBuffer _bb, DREffectt obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DREffectt __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  ///Effect表ID
  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  ///备注
  public string Desc { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(6); }
  ///资源Id
  public int ResourceId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  ///类名(绑定脚本的类名)
  public string ClassName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassNameBytes() { return __p.__vector_as_span(10); }
#else
  public ArraySegment<byte>? GetClassNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetClassNameArray() { return __p.__vector_as_array<byte>(10); }
  ///生成时间(MS,-1:循环)
  public int KeepTime { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  ///执行时间(MS,-1:循环)
  public int RunningTime { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  ///特效触发事件时间
  public int TriggerTime { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  ///特效销毁时间
  public int DeadTime { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  ///音效Id
  public int SoundId { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  ///音效延迟时间(MS)
  public int SoundDelay { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<DREffectt> CreateDREffectt(FlatBufferBuilder builder,
      int Id = 0,
      StringOffset DescOffset = default(StringOffset),
      int ResourceId = 0,
      StringOffset ClassNameOffset = default(StringOffset),
      int KeepTime = 0,
      int RunningTime = 0,
      int TriggerTime = 0,
      int DeadTime = 0,
      int SoundId = 0,
      int SoundDelay = 0) {
    builder.StartObject(10);
    DREffectt.AddSoundDelay(builder, SoundDelay);
    DREffectt.AddSoundId(builder, SoundId);
    DREffectt.AddDeadTime(builder, DeadTime);
    DREffectt.AddTriggerTime(builder, TriggerTime);
    DREffectt.AddRunningTime(builder, RunningTime);
    DREffectt.AddKeepTime(builder, KeepTime);
    DREffectt.AddClassName(builder, ClassNameOffset);
    DREffectt.AddResourceId(builder, ResourceId);
    DREffectt.AddDesc(builder, DescOffset);
    DREffectt.AddId(builder, Id);
    return DREffectt.EndDREffectt(builder);
  }

  public static void StartDREffectt(FlatBufferBuilder builder) { builder.StartObject(10); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset DescOffset) { builder.AddOffset(1, DescOffset.Value, 0); }
  public static void AddResourceId(FlatBufferBuilder builder, int ResourceId) { builder.AddInt(2, ResourceId, 0); }
  public static void AddClassName(FlatBufferBuilder builder, StringOffset ClassNameOffset) { builder.AddOffset(3, ClassNameOffset.Value, 0); }
  public static void AddKeepTime(FlatBufferBuilder builder, int KeepTime) { builder.AddInt(4, KeepTime, 0); }
  public static void AddRunningTime(FlatBufferBuilder builder, int RunningTime) { builder.AddInt(5, RunningTime, 0); }
  public static void AddTriggerTime(FlatBufferBuilder builder, int TriggerTime) { builder.AddInt(6, TriggerTime, 0); }
  public static void AddDeadTime(FlatBufferBuilder builder, int DeadTime) { builder.AddInt(7, DeadTime, 0); }
  public static void AddSoundId(FlatBufferBuilder builder, int SoundId) { builder.AddInt(8, SoundId, 0); }
  public static void AddSoundDelay(FlatBufferBuilder builder, int SoundDelay) { builder.AddInt(9, SoundDelay, 0); }
  public static Offset<DREffectt> EndDREffectt(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DREffectt>(o);
  }
};


}
