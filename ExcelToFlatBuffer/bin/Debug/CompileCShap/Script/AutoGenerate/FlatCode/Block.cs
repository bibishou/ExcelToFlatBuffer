// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameTable
{

using global::System;
using global::FlatBuffers;

public partial struct Table_Block{public IFlatbufferObject GetElement(int i) { return Data(i); }}
public partial struct Table_Block : IFlatbufferObject , ITable
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Table_Block GetRootAsTable_Block(ByteBuffer _bb) { return GetRootAsTable_Block(_bb, new Table_Block()); }
  public static Table_Block GetRootAsTable_Block(ByteBuffer _bb, Table_Block obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Table_Block __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public DRBlock? Data(int j) { int o = __p.__offset(4); return o != 0 ? (DRBlock?)(new DRBlock()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Table_Block> CreateTable_Block(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartObject(1);
    Table_Block.AddData(builder, dataOffset);
    return Table_Block.EndTable_Block(builder);
  }

  public static void StartTable_Block(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, Offset<DRBlock>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, Offset<DRBlock>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Table_Block> EndTable_Block(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Table_Block>(o);
  }
  public static void FinishTable_BlockBuffer(FlatBufferBuilder builder, Offset<Table_Block> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTable_BlockBuffer(FlatBufferBuilder builder, Offset<Table_Block> offset) { builder.FinishSizePrefixed(offset.Value); }
};

public struct DRBlock : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DRBlock GetRootAsDRBlock(ByteBuffer _bb) { return GetRootAsDRBlock(_bb, new DRBlock()); }
  public static DRBlock GetRootAsDRBlock(ByteBuffer _bb, DRBlock obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DRBlock __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  ///Block表ID
  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  ///程序不读
  public string Desc { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(6); }
  ///资源Id
  public int ResourceId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  ///资源Id
  public int IconId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  ///类名
  public string ClassName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassNameBytes() { return __p.__vector_as_span(12); }
#else
  public ArraySegment<byte>? GetClassNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetClassNameArray() { return __p.__vector_as_array<byte>(12); }
  ///是否可以参与行消
  public bool IsCanDispel { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  ///是否可以移动
  public bool IsCanMove { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  ///
  public bool InBlockMap { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  ///特效
  public int DispelEffectId { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  ///是否在关卡编辑器中显示
  public bool IsShowInLevelEditor { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<DRBlock> CreateDRBlock(FlatBufferBuilder builder,
      int Id = 0,
      StringOffset DescOffset = default(StringOffset),
      int ResourceId = 0,
      int IconId = 0,
      StringOffset ClassNameOffset = default(StringOffset),
      bool isCanDispel = false,
      bool isCanMove = false,
      bool InBlockMap = false,
      int DispelEffectId = 0,
      bool isShowInLevelEditor = false) {
    builder.StartObject(10);
    DRBlock.AddDispelEffectId(builder, DispelEffectId);
    DRBlock.AddClassName(builder, ClassNameOffset);
    DRBlock.AddIconId(builder, IconId);
    DRBlock.AddResourceId(builder, ResourceId);
    DRBlock.AddDesc(builder, DescOffset);
    DRBlock.AddId(builder, Id);
    DRBlock.AddIsShowInLevelEditor(builder, isShowInLevelEditor);
    DRBlock.AddInBlockMap(builder, InBlockMap);
    DRBlock.AddIsCanMove(builder, isCanMove);
    DRBlock.AddIsCanDispel(builder, isCanDispel);
    return DRBlock.EndDRBlock(builder);
  }

  public static void StartDRBlock(FlatBufferBuilder builder) { builder.StartObject(10); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset DescOffset) { builder.AddOffset(1, DescOffset.Value, 0); }
  public static void AddResourceId(FlatBufferBuilder builder, int ResourceId) { builder.AddInt(2, ResourceId, 0); }
  public static void AddIconId(FlatBufferBuilder builder, int IconId) { builder.AddInt(3, IconId, 0); }
  public static void AddClassName(FlatBufferBuilder builder, StringOffset ClassNameOffset) { builder.AddOffset(4, ClassNameOffset.Value, 0); }
  public static void AddIsCanDispel(FlatBufferBuilder builder, bool isCanDispel) { builder.AddBool(5, isCanDispel, false); }
  public static void AddIsCanMove(FlatBufferBuilder builder, bool isCanMove) { builder.AddBool(6, isCanMove, false); }
  public static void AddInBlockMap(FlatBufferBuilder builder, bool InBlockMap) { builder.AddBool(7, InBlockMap, false); }
  public static void AddDispelEffectId(FlatBufferBuilder builder, int DispelEffectId) { builder.AddInt(8, DispelEffectId, 0); }
  public static void AddIsShowInLevelEditor(FlatBufferBuilder builder, bool isShowInLevelEditor) { builder.AddBool(9, isShowInLevelEditor, false); }
  public static Offset<DRBlock> EndDRBlock(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DRBlock>(o);
  }
};


}
